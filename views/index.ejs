<!DOCTYPE html>
<html>

  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap core CSS -->
    <link href="css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/main.css" rel="stylesheet">
  </head>
  <body>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>
    <div id="controls">
      <!-- <button onclick="onVideoPlay()">Play</button>
      <button onclick="onVideoPause()">Pause</button> -->
      <!-- <progress id="progress" max="100" value="0">Progress</progress> -->
    </div>

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      var socket;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: 'Vh5j7zDpy-4',
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      var doNotEmit = false;
      var safeTimeouts = 0;
      function onPlayerReady(event) {
        socket = io();

        socket.on('play', function(msg){
          doNotEmit = true;
          if (safeTimeouts != 0) {
            clearTimeout(safeTimeouts);
          }
          safeTimeouts = setTimeout(function(){ doNotEmit=false }, 10000);
          console.log("Received play from socket at ", msg);
          player.seekTo(seconds=msg, allowSeekAhead=true);
          if (player.getPlayerState() != 1){
            console.log("Player was not play state, playing...");
            player.playVideo();
          }      
        });

        socket.on('pause', function(msg){
          doNotEmit = true;
          if (safeTimeouts != 0) {
            clearTimeout(safeTimeouts);
          }
          safeTimeouts = setTimeout(function(){ doNotEmit=false }, 10000);
          console.log("Received pause from socket at ", msg);
          player.seekTo(seconds=msg, allowSeekAhead=true);
          if (player.getPlayerState() != 2){
            console.log("Player was not paused state, pausing...");
            player.pauseVideo();
          }       
        });

      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      function onPlayerStateChange(event) {
        console.log("Player state changes", event);
        timeStamp = player.getCurrentTime()

        if ((!doNotEmit) && event.data == YT.PlayerState.PLAYING) {
          console.log("Playing video at : ", timeStamp)
          socket.emit("play", timeStamp);
        }  

        if ((!doNotEmit) && event.data == YT.PlayerState.PAUSED) {
          console.log("Pausing video at : ", timeStamp);
          socket.emit("pause", timeStamp);
        }
        console.log("Player state change detected but not acted upon.")
      }
      function stopVideo() {
        player.stopVideo();
      }

      </script>
    <script src="/socket.io/socket.io.js"></script>
  </body>
</html>
